import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from langchain import LLMChain, PromptTemplate
from langchain_groq import ChatGroq
import os
import re
import json
from dotenv import load_dotenv
import matplotlib.pyplot as plt

# Cargar variables de entorno
load_dotenv()
os.environ["GROQ_API_KEY"] = os.getenv("GROQ_API_KEY")

# Configurar LLM
llm = ChatGroq(
    model="gemma2-9b-it",
    temperature=0,
    max_tokens=None,
    timeout=None,
    max_retries=2,
)

# Preguntas iniciales al inversor
preguntas_inversor = [
    "¬øCu√°l es tu objetivo principal al invertir?",
    "¬øCu√°l es tu horizonte temporal de inversi√≥n?",
    "¬øTienes experiencia previa invirtiendo en activos de mayor riesgo como acciones, criptomonedas o fondos alternativos?",
    "¬øEst√°s dispuesto a sacrificar parte de la rentabilidad potencial a cambio de un impacto social o ambiental positivo?",
    "¬øQu√© opinas sobre el cambio clim√°tico?"
]

# Noticias para an√°lisis
noticias = [
    "Las empresas 'borran' la ESG de sus presentaciones de resultados",
    "Duro Felguera activa un ERE para un m√°ximo de 699 empleados en pleno preconcurso",
    "Iberdrola, elegida la empresa espa√±ola con mejor gobierno corporativo por ‚ÄòWorld Finance‚Äô",
    "El Ibex 35 sufre su mayor ca√≠da desde abril tras las amenazas de Trump a Espa√±a por el gasto militar",
    "Cruz Roja y la Fundaci√≥n Amancio Ortega pal√≠an la soledad de 13.000 mayores gracias a Voces en Red",
    '"Les haremos pagar el doble": la amenaza de Trump a Espa√±a, el √∫nico pa√≠s de la OTAN que se niega a gastar un 5% de su PIB en defensa'
]

# Plantillas de LLM
plantilla_evaluacion = """
Eval√∫a si esta respuesta del usuario es suficientemente detallada para un an√°lisis ESG.
Criterios:
- Claridad de la opini√≥n
- Especificidad respecto a la noticia
- Menci√≥n de aspectos ESG (ambiental, social, gobernanza o riesgo)
- Identificaci√≥n de preocupaciones o riesgos

Respuesta del usuario: {respuesta}

Si es vaga o superficial, responde "False".
Si contiene opini√≥n sustancial y analizable, responde "True".

Solo responde "True" o "False".
"""
prompt_evaluacion = PromptTemplate(template=plantilla_evaluacion, input_variables=["respuesta"])
cadena_evaluacion = LLMChain(llm=llm, prompt=prompt_evaluacion)

plantilla_reaccion = """
Noticia previa: {noticia}
Reacci√≥n del inversor: {reaccion}
Genera √öNICAMENTE una pregunta de seguimiento enfocada en profundizar en su opini√≥n, tomando en cuenta tanto la noticia como la reacci√≥n del inversor.
Ejemplo:
"¬øConsideras que la existencia de mecanismos robustos de control interno y transparencia podr√≠a mitigar tu preocupaci√≥n por la gobernanza corporativa en esta empresa?"
"""
prompt_reaccion = PromptTemplate(template=plantilla_reaccion, input_variables=["noticia", "reaccion"])
cadena_reaccion = LLMChain(llm=llm, prompt=prompt_reaccion)

plantilla_perfil = """
An√°lisis de respuestas: {analisis}
Genera un perfil detallado del inversor basado en las respuestas, teniendo en cuenta lo que se ha preguntado, enfoc√°ndote en los pilares ESG (Ambiental, Social y Gobernanza) y su aversi√≥n al riesgo.
Asigna una puntuaci√≥n de 0 a 100 para cada pilar ESG y para el riesgo, donde 0 indica ninguna preocupaci√≥n y 100 m√°xima preocupaci√≥n o aversi√≥n.
Devuelve las 4 puntuaciones en formato: Ambiental: [puntuaci√≥n], Social: [puntuaci√≥n], Gobernanza: [puntuaci√≥n], Riesgo: [puntuaci√≥n]
"""
prompt_perfil = PromptTemplate(template=plantilla_perfil, input_variables=["analisis"])
cadena_perfil = LLMChain(llm=llm, prompt=prompt_perfil)

# Funci√≥n para procesar respuestas v√°lidas a las noticias
def procesar_respuesta_valida(user_input, current_noticia):
    pregunta_seguimiento = cadena_reaccion.run(noticia=current_noticia, reaccion=user_input).strip()
    if st.session_state.contador_preguntas == 0:
        with st.chat_message("bot", avatar="ü§ñ"):
            st.write(pregunta_seguimiento)
        st.session_state.historial.append({"tipo": "bot", "contenido": pregunta_seguimiento})
        st.session_state.pregunta_pendiente = True
        st.session_state.contador_preguntas += 1
    else:
        st.session_state.reacciones.append(user_input)
        st.session_state.contador += 1
        st.session_state.mostrada_noticia = False
        st.session_state.contador_preguntas = 0
        st.session_state.pregunta_pendiente = False
        st.rerun()

# Inicializar estados
if "historial" not in st.session_state:
    st.session_state.historial = []
    st.session_state.contador = 0
    st.session_state.reacciones = []
    st.session_state.mostrada_noticia = False
    st.session_state.contador_preguntas = 0
    st.session_state.pregunta_general_idx = 0
    st.session_state.pregunta_pendiente = False
    st.session_state.cuestionario_enviado = False
    st.session_state.perfil_valores = {}

# Interfaz
st.title("Chatbot de An√°lisis del perfil ESG y riesgo del inversor")
st.markdown("""
**Primero interactuar√°s con un chatbot para evaluar tu perfil ESG y de riesgo.**
**Al final, completar√°s un test tradicional de perfilado.**
**Todos los datos facilitados son an√≥nimos**
**Por favor al finalizar haz click en el Bot√≥n "Enviar respuestas".**
**Muchas gracias por tu colaboraci√≥n.**
""")

# Mostrar historial
for mensaje in st.session_state.historial:
    with st.chat_message(mensaje["tipo"], avatar="ü§ñ" if mensaje["tipo"] == "bot" else None):
        st.write(mensaje["contenido"])

# Preguntas iniciales al inversor
if st.session_state.pregunta_general_idx < len(preguntas_inversor):
    pregunta_actual = preguntas_inversor[st.session_state.pregunta_general_idx]
    if not any(p["contenido"] == pregunta_actual for p in st.session_state.historial if p["tipo"] == "bot"):
        st.session_state.historial.append({"tipo": "bot", "contenido": pregunta_actual})
        with st.chat_message("bot", avatar="ü§ñ"):
            st.write(pregunta_actual)

    user_input = st.chat_input("Escribe tu respuesta aqu√≠...")
    if user_input:
        st.session_state.historial.append({"tipo": "user", "contenido": user_input})
        st.session_state.reacciones.append(user_input)
        st.session_state.pregunta_general_idx += 1
        st.rerun()

# Noticias ESG
elif st.session_state.contador < len(noticias):
    noticia_actual = noticias[st.session_state.contador] # Capturar la noticia actual
    if not st.session_state.mostrada_noticia:
        texto_noticia = f"¬øQu√© opinas sobre esta noticia? {noticia_actual}"
        st.session_state.historial.append({"tipo": "bot", "contenido": texto_noticia})
        with st.chat_message("bot", avatar="ü§ñ"):
            st.write(texto_noticia)
        st.session_state.mostrada_noticia = True

    user_input = st.chat_input("Escribe tu respuesta aqu√≠...")
    if user_input:
        st.session_state.historial.append({"tipo": "user", "contenido": user_input})
        if st.session_state.pregunta_pendiente:
            st.session_state.reacciones.append(user_input)
            st.session_state.contador += 1
            st.session_state.mostrada_noticia = False
            st.session_state.contador_preguntas = 0
            st.session_state.pregunta_pendiente = False
            st.rerun()
        else:
            evaluacion = cadena_evaluacion.run(respuesta=user_input).strip().lower()
            if evaluacion == "false":
                # Pasar la noticia_actual a cadena_reaccion
                pregunta_ampliacion = cadena_reaccion.run(noticia=noticia_actual, reaccion=user_input).strip()
                with st.chat_message("bot", avatar="ü§ñ"):
                    st.write(pregunta_ampliacion)
                st.session_state.historial.append({"tipo": "bot", "contenido": pregunta_ampliacion})
                st.session_state.pregunta_pendiente = True
            else:
                procesar_respuesta_valida(user_input, noticia_actual) # Pasar la noticia_actual

# Perfil final y test tradicional
else:
    # Generar perfil (si no est√° ya generado)
    if not st.session_state.perfil_valores:
        analisis_total = "\n".join(st.session_state.reacciones)
        perfil = cadena_perfil.run(analisis=analisis_total)

        puntuaciones = {
            "Ambiental": int(re.search(r"Ambiental: (\d+)", perfil).group(1)),
            "Social": int(re.search(r"Social: (\d+)", perfil).group(1)),
            "Gobernanza": int(re.search(r"Gobernanza: (\d+)", perfil).group(1)),
            "Aversi√≥n al Riesgo": int(re.search(r"Riesgo: (\d+)", perfil).group(1)),
        }
        st.session_state.perfil_valores = puntuaciones
    # Mostrar perfil y gr√°fico siempre
    with st.chat_message("bot", avatar="ü§ñ"):
        st.write(f"**Perfil del inversor:** Ambiental: {st.session_state.perfil_valores['Ambiental']}, " +
                 f"Social: {st.session_state.perfil_valores['Social']}, " +
                 f"Gobernanza: {st.session_state.perfil_valores['Gobernanza']}, " +
                 f"Riesgo: {st.session_state.perfil_valores['Aversi√≥n al Riesgo']}") # Corregido de 'Aversi√≥n al Riesgo' a 'Riesgo'

    fig, ax = plt.subplots()
    ax.bar(st.session_state.perfil_valores.keys(), st.session_state.perfil_valores.values(), color="skyblue")
    ax.set_ylabel("Puntuaci√≥n (0-100)")
    ax.set_title("Perfil del Inversor")
    st.pyplot(fig)

    # Mostrar cuestionario si no se ha enviado
    if not st.session_state.cuestionario_enviado:
        st.header("Cuestionario Final de Perfilado")

        with st.form("formulario_final"):
            objetivo = st.radio("2.1. ¬øCu√°l es tu objetivo principal al invertir?",
                                 ["Preservar el capital (riesgo bajo)", "Obtener rentabilidad ligeramente por encima del tipo de inter√©s de mercado (riesgo bajo-medio)", "Obtener rentabilidad significativamente por encima del tipo de inter√©s de mercado (riesgo medio-alto)", "Obtener la m√°xima rentabilidad posible (riesgo muy alto)"],
                                 index=None)
            horizonte = st.radio("2.2. ¬øCu√°l es tu horizonte temporal de inversi√≥n?",
                                 ["Menos de 1 a√±o", "Entre 1 y 3 a√±os", "Entre 3 y 5 a√±os", "M√°s de 5 a√±os"],
                                 index=None)

            formacion = st.radio("2.3. ¬øCu√°l es tu nivel de formaci√≥n?",
                                 ["Educaci√≥n no universitaria", "Educaci√≥n universitaria o superior", "Educaci√≥n universitaria o superior relacionada con los mercados financieros o la econom√≠a"],

                                 index=None)

            cargo = st.radio("2.4. ¬øTrabajas o has trabajado en contacto directo con instrumentos o mercados financieros?",
                                 ["Nunca","Menos de 1 a√±o", "Entre 1 y 3 a√±os", "M√°s de 3 a√±os"],
                                 index=None)

            conocimiento = st.radio("2.5. ¬øQue conocimiento tienes sobre los mercados financieros?",
                                 ["No estoy familiarizado", "Entiendo los conceptos b√°sicos como la inflaci√≥n, el tipo de inter√©s", "Entiendo conceptos financieros complejos como volatilidad, riesgo de liquidez, convertibilidad en acciones"],
                                 index=None)

            productos = st.multiselect("3.1. ¬øQu√© productos financieros has utilizado?",
                                 ["Acciones Cotizadas de Renta Variable o Fondos Cotizados (ETFs) o IICs (Fondos o SICAVS)", "Renta Fija Privada simple o C√©dulas hipotecarias", "Rentas vitalicias o seguros de vida ahorro garantizados", "Instrumentos de Mercado Monetario (letras, pagar√©s) o Bonos y Obligaciones del Estado", "Derivados (futuros, opciones)", "Criptomonedas"])
            productos_str = ", ".join(productos) if productos else ""

            volatilidad = st.radio("3.2. ¬øAnte una p√©rdida de valor inesperada de menos de un 10% como se comportar√≠a?",
                                 ["Mantendr√≠a la inversi√≥n", "Mantendr√≠a la inversi√≥n pero har√≠a mas seguimiento", "Vender√≠a una parte de la inversi√≥n", "Vender√≠a toda la inversi√≥n"],
                                 index=None)
            corto_plazo = st.radio("3.3. ¬øQu√© porcentaje de p√©rdidas est√° dispuesto a soportar en el plazo de un a√±o?",
                                 ["0%", "Hasta un 5%", "Hasta un 10%", "Hasta un 25%", "M√°s del 25%"],
                                 index=None)

            patrimonio = st.radio("4.1. ¬øQu√© porcentaje de su patrimonio tiene invertido en instrumentos financieros?",
                                 ["Menos del 25%", "Entre el 25% y el 50%", "M√°s del 50%"],
                                 index=None)

            necesidad = st.radio("4.2. ¬øQu√© porcentaje de sus inversiones cree que va a necesitar en un periodo de un a√±o?",
                                 ["Menos del 25%", "Entre el 25% y el 50%", "M√°s del 50%"],
                                 index=None)

            edad = st.radio("4.3. ¬øA que rango de edad pertenece?",
                                 ["18-35 a√±os", "36-50 a√±os", "51-65 a√±os", "M√°s de 65 a√±os"],
                                 index=None)


            sostenibilidad = st.radio("6.1. ¬øTe interesa que tus inversiones consideren criterios de sostenibilidad?",
                                     ["S√≠", "No"],
                                     index=None)

            fondo_clima = st.radio("6.2. ¬øCual de los siguientes aspectos te interesan que se tengan en cuenta?",
                                     ["Relacionadas con el clima y el medioambiente", "Relacionadas con asuntos sociales y de gobernanza", "Ambas","Ninguna"],
                                     index=None)
            porcentaje = st.radio("6.3. ¬øQuieres incluir en tu cartera inversiones ESG?",
                                     ["Si, al menos un 5%", "Si, al menos un 15%", "Si, al menos un 35%", "No"],
                                     index=None)


            enviar = st.form_submit_button("Enviar respuestas")

            if enviar:
                try:
                    creds_json_str = st.secrets["gcp_service_account"]
                    creds_json = json.loads(creds_json_str)
                    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
                    client = gspread.authorize(creds)
                    sheet = client.open('BBDD_RESPUESTAS').sheet1


                    productos_str = ", ".join(productos)

                    # C√°lculo del puntaje total del test tradicional
                    puntos = 0

                    # 2.1 Objetivo
                    puntos += {
                        "Preservar el capital (riesgo bajo)": 1,
                        "Obtener rentabilidad ligeramente por encima del tipo de inter√©s de mercado (riesgo bajo-medio)": 2,
                        "Obtener rentabilidad significativamente por encima del tipo de inter√©s de mercado (riesgo medio-alto)": 3,
                        "Obtener la m√°xima rentabilidad posible (riesgo muy alto)": 4,
                    }.get(objetivo, 0)

                    # 2.2 Horizonte
                    puntos += {
                        "Menos de 1 a√±o": 1,
                        "Entre 1 y 3 a√±os": 2,
                        "Entre 3 y 5 a√±os": 3,
                        "M√°s de 5 a√±os": 4,
                    }.get(horizonte, 0)

                    # 2.3 Formaci√≥n
                    puntos += {
                        "Educaci√≥n no universitaria": 1,
                        "Educaci√≥n universitaria o superior": 2,
                        "Educaci√≥n universitaria o superior relacionada con los mercados financieros o la econom√≠a": 3,
                    }.get(formacion, 0)

                    # 2.4 Cargo
                    puntos += {
                        "Nunca": 1,
                        "Menos de 1 a√±o": 2,
                        "Entre 1 y 3 a√±os": 3,
                        "M√°s de 3 a√±os": 4,
                    }.get(cargo, 0)

                    # 2.5 Conocimiento
                    puntos += {
                        "No estoy familiarizado": 1,
                        "Entiendo los conceptos b√°sicos como la inflaci√≥n, el tipo de inter√©s": 2,
                        "Entiendo conceptos financieros complejos como volatilidad, riesgo de liquidez, convertibilidad en acciones": 3,
                    }.get(conocimiento, 0)

                    # 3.1 Productos
                    puntos += len(productos)

                    # 3.2 Volatilidad
                    puntos += {
                        "Mantendr√≠a la inversi√≥n": 4,
                        "Mantendr√≠a la inversi√≥n pero har√≠a mas seguimiento": 3,
                        "Vender√≠a una parte de la inversi√≥n": 2,
                        "Vender√≠a toda la inversi√≥n": 1,
                    }.get(volatilidad, 0)

                    # 3.3 Corto plazo
                    puntos += {
                        "0%": 1,
                        "Hasta un 5%": 2,
                        "Hasta un 10%": 3,
                        "Hasta un 25%": 4,
                        "M√°s del 25%": 5,
                    }.get(corto_plazo, 0)

                    # 4.1 Patrimonio
                    puntos += {
                        "Menos del 25%": 1,
                        "Entre el 25% y el 50%": 2,
                        "M√°s del 50%": 3,
                    }.get(patrimonio, 0)

                    # 4.2 Necesidad
                    puntos += {
                        "M√°s del 50%": 1,
                        "Entre el 25% y el 50%": 2,
                        "Menos del 25%": 3,
                    }.get(necesidad, 0)

                    puntos_esg = 0

                    puntos_esg += {
                        "S√≠": 2,
                        "No": 0,
                    }.get(sostenibilidad, 0)

                    # 6.2 ¬øCu√°l de los siguientes aspectos te interesan que se tengan en cuenta?
                    puntos_esg += {
                        "Relacionadas con el clima y el medioambiente": 2,
                        "Relacionadas con asuntos sociales y de gobernanza": 2,
                        "Ambas": 3,
                        "Ninguna": 0,
                    }.get(fondo_clima, 0)

                    # 6.3 ¬øQuieres incluir en tu cartera inversiones ESG?
                    puntos_esg += {
                        "Si, al menos un 5%": 1,
                        "Si, al menos un 15%": 2,
                        "Si, al menos un 35%": 3,
                        "No": 0,
                        }.get(porcentaje, 0)

                    fila = st.session_state.reacciones + [
                        str(st.session_state.perfil_valores.get("Ambiental", "")),
                        str(st.session_state.perfil_valores.get("Social", "")),
                        str(st.session_state.perfil_valores.get("Gobernanza", "")),
                        str(st.session_state.perfil_valores.get("Riesgo", "")),
                        objetivo or "",
                        horizonte or "",
                        formacion or "",
                        cargo or "",
                        conocimiento or "",
                        productos_str or "",
                        volatilidad or "",
                        corto_plazo or "",
                        patrimonio or "",
                        necesidad or "",
                        edad or "",
                        sostenibilidad or "",
                        fondo_clima or "",
                        porcentaje or ""
                    ]

                    # A√±adir puntaje al final
                    fila.append(str(puntos))
                    fila.append(str(puntos_esg))

                    sheet.append_row(fila)

                    st.success("¬°Formulario enviado correctamente!")
                except Exception as e:
                    st.error(f"Error al guardar en Google Sheets: {e}")
